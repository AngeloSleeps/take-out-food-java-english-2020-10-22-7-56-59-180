import java.text.DecimalFormat;
import java.util.List;
import java.util.stream.Collectors;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    private double computeHalfPricePromotion(List<Item> productList) {
        return productList.stream()
                    .filter(item -> item.getId().equals("ITEM0001") || item.getId().equals("ITEM0022"))
                    .map(item -> item.getPrice()*.5)
                            .reduce(0d, Double::sum);
    }
    public String bestCharge(List<String> inputs) {
        // Get product using id
        List<Item> productList = inputs.stream()
                .map(s -> s.split(" ")[0])
                .map(code -> itemRepository.findById(code))
                .collect(Collectors.toList());
        List<Integer> productQuantityList = inputs.stream()
                .map(s -> s.split(" ")[2])
                .map(Integer::parseInt)
                .collect(Collectors.toList());
        StringBuilder result = null;
        SalesPromotion promotion = null;
        DecimalFormat format = new DecimalFormat("0.#");
        double total = 0;
        double savingsOfHalfPrice = computeHalfPricePromotion(productList);
        /*
            Generate Order Details
         */
        result = new StringBuilder("============= Order details =============\n");
        for (int i = 0; i < productList.size(); i++) {
            Item item = productList.get(i);
            double price = item.getPrice() * productQuantityList.get(i);
            total += price;
            result.append(item.getName());
            result.append(" x ")
                    .append(productQuantityList.get(i))
                    .append(" = ")
                    .append(format.format(price))
                    .append(" yuan\n");
        }
        if(total >= 30 && (total-6) < (total - savingsOfHalfPrice)) {
            promotion = salesPromotionRepository.findAll().get(0);
            total -= 6f;
            result.append("-----------------------------------\n")
                    .append("Promotion used:\n")
                    .append(promotion.getDisplayName())
                    .append(", saving 6 yuan\n");
        }
        if (productList.stream().anyMatch(item -> item.getId().equals("ITEM0001") || item.getId().equals("ITEM0022"))
        && (total-savingsOfHalfPrice < (total-6))) {
            promotion = salesPromotionRepository.findAll().get(1);
            total-=savingsOfHalfPrice;
            result.append("-----------------------------------\n")
                    .append("Promotion used:\n")
                    .append(promotion.getDisplayName())
                    .append(" (")
                    .append(itemRepository.findById("ITEM0001").getName())
                    .append("，")
                    .append(itemRepository.findById("ITEM0022").getName())
                    .append(")，saving ")
                    .append(format.format(savingsOfHalfPrice))
                    .append(" yuan\n");
        }


        /*
            Generate total portion
         */
        result.append("-----------------------------------\n")
                .append("Total：")
                .append(format.format(total))
                .append(" yuan\n")
                .append("===================================");
        System.out.println(result);
        return result.toString();
    }
}
